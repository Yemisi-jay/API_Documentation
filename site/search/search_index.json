{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WoodCore Website Review Overview The WoodCore website has a modern and clean aesthetic. The focus appears to be on showcasing products and services in a clear and engaging manner. The homepage effectively communicates Woodcore\u2019s mission to provide \"modern core banking infrastructure.\" The messaging is clear and geared towards both technical and non-technical audiences, making it easy for visitors to understand the essential products. Clarity The homepage provides a strong first impression with a well-organised layout and beautiful interface. The website is well-organized, with simple menus and obvious calls-to-action (CTAs) like \"Request a Demo\" and \"Contact Us.\" Accuracy The website appears to be factually accurate with up-to-date service descriptions. A periodic review of content is recommended to ensure all details remain current. User-Friendly Navigation The website is generally easy to navigate and use. - Responsiveness: The website's design works well on mobile devices since it adapts to various screen sizes. - Load Speed: The website loads quickly, which is beneficial for user retention and SEO. Suggestions Search Features I'll suggest search bar functionality, Users could find specific information more quickly with the use of a search box, in the homepage section. This would improve usability, especially for developers searching for certain subjects or endpoints.","title":"Home"},{"location":"#woodcore-website-review","text":"","title":"WoodCore Website Review"},{"location":"#overview","text":"The WoodCore website has a modern and clean aesthetic. The focus appears to be on showcasing products and services in a clear and engaging manner. The homepage effectively communicates Woodcore\u2019s mission to provide \"modern core banking infrastructure.\" The messaging is clear and geared towards both technical and non-technical audiences, making it easy for visitors to understand the essential products.","title":"Overview"},{"location":"#clarity","text":"The homepage provides a strong first impression with a well-organised layout and beautiful interface. The website is well-organized, with simple menus and obvious calls-to-action (CTAs) like \"Request a Demo\" and \"Contact Us.\"","title":"Clarity"},{"location":"#accuracy","text":"The website appears to be factually accurate with up-to-date service descriptions. A periodic review of content is recommended to ensure all details remain current.","title":"Accuracy"},{"location":"#user-friendly-navigation","text":"The website is generally easy to navigate and use. - Responsiveness: The website's design works well on mobile devices since it adapts to various screen sizes. - Load Speed: The website loads quickly, which is beneficial for user retention and SEO.","title":"User-Friendly Navigation"},{"location":"#suggestions","text":"","title":"Suggestions"},{"location":"#search-features","text":"I'll suggest search bar functionality, Users could find specific information more quickly with the use of a search box, in the homepage section. This would improve usability, especially for developers searching for certain subjects or endpoints.","title":"Search Features"},{"location":"API_headers/","text":"API Headers \ud83d\udd11 API Keys \ud83c\udf0d The API authorization keys can be generated from the console once access has been granted. Header Description Authorization Bearer token supplied to you on request Content-Type Set content-type to application/json \ud83d\udccc Other Information WoodCore follows conventional HTTP response codes to indicate the success or failure of an API request: 2xx \u2192 Indicates a successful request. 4xx \u2192 Indicates a client-side error due to incorrect or missing information. 5xx \u2192 Indicates a server error, which is rare and usually related to WoodCore\u2019s partners.","title":"API Headers"},{"location":"API_headers/#api-headers","text":"","title":"API Headers"},{"location":"API_headers/#api-keys","text":"The API authorization keys can be generated from the console once access has been granted. Header Description Authorization Bearer token supplied to you on request Content-Type Set content-type to application/json","title":"\ud83d\udd11 API Keys \ud83c\udf0d"},{"location":"API_headers/#other-information","text":"WoodCore follows conventional HTTP response codes to indicate the success or failure of an API request: 2xx \u2192 Indicates a successful request. 4xx \u2192 Indicates a client-side error due to incorrect or missing information. 5xx \u2192 Indicates a server error, which is rare and usually related to WoodCore\u2019s partners.","title":"\ud83d\udccc Other Information"},{"location":"Customer/","text":"Customer Overview \u2728 Customers on Woodcore are your end-users. They can be individual customers or corporate customers that make use of your product. The first point of entry in banking is gathering customer information, often referred to as the Customer Information File (CIF) . \ud83d\udc4d Classic Example Think of Mark as an individual customer, Single signatory to an account. \ud83d\udea7 Customer can be created in a Pending or Active state Customer Types Individual Customers Represent a single signatory, e.g., Mark. Use the following fields: firstname middlename (optional) lastname Corporate Customers Represent a business or any entity known by a single name. Use the following field: fullname \ud83d\udc4d Classic Example Think of Mark as an individual customer, acting as the sole signatory to an account. Customer Status Pending: Customers can be created with a pending status. Active: Customers can also be created directly in an active state. Account Creation Workflow Optional Deposit Account Creation: When creating a customer for the first time, you have the option to create a deposit account simultaneously. \ud83d\udccc Note You can create a customer along with a deposit account and block the account from making transactions until the KYC (Know Your Customer) requirements are met. Client Type Specification clientType Field: This field is used to specify the kind of customer: individual corporate Address Configuration Enabling Address Information: If address information is enabled ( _isAddressEnabled=true ), the customer's address can be captured following the specified parameters. To Enable Address on the WoodCore Console: Navigate to Configuration Select Utilities Go to Configuration Choose Enable-Address Tier Level Configuration You can configure a client's tierLevel directly via the WoodCore console during customer creation. Alternatively, through the provided APIs.","title":"Customer Overview"},{"location":"Customer/#customer-overview","text":"Customers on Woodcore are your end-users. They can be individual customers or corporate customers that make use of your product. The first point of entry in banking is gathering customer information, often referred to as the Customer Information File (CIF) . \ud83d\udc4d Classic Example Think of Mark as an individual customer, Single signatory to an account. \ud83d\udea7 Customer can be created in a Pending or Active state","title":"Customer Overview \u2728"},{"location":"Customer/#customer-types","text":"Individual Customers Represent a single signatory, e.g., Mark. Use the following fields: firstname middlename (optional) lastname Corporate Customers Represent a business or any entity known by a single name. Use the following field: fullname \ud83d\udc4d Classic Example Think of Mark as an individual customer, acting as the sole signatory to an account.","title":"Customer Types"},{"location":"Customer/#customer-status","text":"Pending: Customers can be created with a pending status. Active: Customers can also be created directly in an active state.","title":"Customer Status"},{"location":"Customer/#account-creation-workflow","text":"Optional Deposit Account Creation: When creating a customer for the first time, you have the option to create a deposit account simultaneously. \ud83d\udccc Note You can create a customer along with a deposit account and block the account from making transactions until the KYC (Know Your Customer) requirements are met.","title":"Account Creation Workflow"},{"location":"Customer/#client-type-specification","text":"clientType Field: This field is used to specify the kind of customer: individual corporate","title":"Client Type Specification"},{"location":"Customer/#address-configuration","text":"Enabling Address Information: If address information is enabled ( _isAddressEnabled=true ), the customer's address can be captured following the specified parameters. To Enable Address on the WoodCore Console: Navigate to Configuration Select Utilities Go to Configuration Choose Enable-Address","title":"Address Configuration"},{"location":"Customer/#tier-level-configuration","text":"You can configure a client's tierLevel directly via the WoodCore console during customer creation. Alternatively, through the provided APIs.","title":"Tier Level Configuration"},{"location":"pagination/","text":"Pagination The WoodCore API provides a simple set of query parameters to handle pagination, making it easier to retrieve large datasets efficiently. Description Endpoints that return multiple results are paginated. To fetch data, you must supply an offset query parameter. You can also define the page size using the limit query parameter. perPage : Specifies the number of records per page. page : Specifies the page number to be retrieved. Default Behavior By default, the system returns 15 records per page if perPage is not specified.","title":"Pagination"},{"location":"pagination/#pagination","text":"The WoodCore API provides a simple set of query parameters to handle pagination, making it easier to retrieve large datasets efficiently.","title":"Pagination"},{"location":"pagination/#description","text":"Endpoints that return multiple results are paginated. To fetch data, you must supply an offset query parameter. You can also define the page size using the limit query parameter. perPage : Specifies the number of records per page. page : Specifies the page number to be retrieved.","title":"Description"},{"location":"pagination/#default-behavior","text":"By default, the system returns 15 records per page if perPage is not specified.","title":"Default Behavior"},{"location":"reference/","text":"Reference API Design \ud83d\udd25 The WoodCore API is organized around REST . Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, produces JSON-encoded reponses, and adheres to standard HTTP response codes, authentication, and verbs. You can use the WoodCore API for free in Sandbox mode. This has no effect on your data in Production mode, nor does it interact with any production instance from the financial service offerings. It is a test-only environment. Production mode offers: Full, unlimited access to every feature in your selected plan and begins processing live requests when in use \ud83d\udea7 Important: The API key you use for authentication determines whether your request runs in Sandbox or Production mode . API keys for Sandbox and Production environments are available upon request at hello@woodcoreapp.com. \ud83d\udcd8 API Key Format: Sandbox keys , starts with wc_test_{{api_key}} Production/Live keys , starts with wc_live_{{api_key}} API Protocol The WoodCore API adheres to the REST standard making use of HTTP techniques outlined by the RFC 2616 protocol. it uses GET and POST requests, returns HTTP response codes indicating status and errors. Request & Response Format All responses are in JSON format All requests must include: Content-Type: application/json header and a valid JSON body (when required) Security The WoodCore API is served over HTTPS TLS v1.2 for data privacy ; HTTP or HTTPS with TLS equal 1.1 and below are not supported. \u2757 Security Notice: The API only supports secure communications over HTTPS TLS v1.2 to ensure data privacy. Connections using HTTP or HTTPS with TLS under v1.2 are not supported and will be rejected.","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"},{"location":"reference/#api-design","text":"The WoodCore API is organized around REST . Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, produces JSON-encoded reponses, and adheres to standard HTTP response codes, authentication, and verbs. You can use the WoodCore API for free in Sandbox mode. This has no effect on your data in Production mode, nor does it interact with any production instance from the financial service offerings. It is a test-only environment. Production mode offers: Full, unlimited access to every feature in your selected plan and begins processing live requests when in use \ud83d\udea7 Important: The API key you use for authentication determines whether your request runs in Sandbox or Production mode . API keys for Sandbox and Production environments are available upon request at hello@woodcoreapp.com. \ud83d\udcd8 API Key Format: Sandbox keys , starts with wc_test_{{api_key}} Production/Live keys , starts with wc_live_{{api_key}}","title":"API Design \ud83d\udd25"},{"location":"reference/#api-protocol","text":"The WoodCore API adheres to the REST standard making use of HTTP techniques outlined by the RFC 2616 protocol. it uses GET and POST requests, returns HTTP response codes indicating status and errors.","title":"API Protocol"},{"location":"reference/#request-response-format","text":"All responses are in JSON format All requests must include: Content-Type: application/json header and a valid JSON body (when required)","title":"Request &amp; Response Format"},{"location":"reference/#security","text":"The WoodCore API is served over HTTPS TLS v1.2 for data privacy ; HTTP or HTTPS with TLS equal 1.1 and below are not supported. \u2757 Security Notice: The API only supports secure communications over HTTPS TLS v1.2 to ensure data privacy. Connections using HTTP or HTTPS with TLS under v1.2 are not supported and will be rejected.","title":"Security"},{"location":"review/","text":"Documentation Review Strengths Completeness: The documentation is comprehensive, it includes detailed descriptions of API endpoints, which is arranged logically by functionality. For each endpoint, examples of requests and responses are given which facilitates better understanding and implementation for the developers. The most intriguing part for me is the inclusion of code snippet in several programming languages (such as cURL, Python, PHP, and JavaScript) this enhances developer usability. Coherence: The guides are organized in a logical progression, from introductory materials to advanced usage scenarios. \u2757 Note: As I was in the process of redocumenting the guide and API, the API documentation page became inaccessible on Friday afternoon, prompting a login request. I reached out to the People's Operations Officer, who provided me with the necessary credentials. However, upon attempting to log in, the process repeatedly cycled without granting access to the API documentation. To prevent such issues in the future, I recommend implementing a more robust routing system whenever updates are deployed. Additionally, thorough testing should be conducted to ensure all functionalities remain intact. The Project Manager (PM) should also establish testing as a mandatory step in the standard operating procedures before pushing updates to the live server.","title":"Documentation Review"},{"location":"review/#documentation-review","text":"","title":"Documentation Review"},{"location":"review/#strengths","text":"","title":"Strengths"},{"location":"review/#completeness","text":"The documentation is comprehensive, it includes detailed descriptions of API endpoints, which is arranged logically by functionality. For each endpoint, examples of requests and responses are given which facilitates better understanding and implementation for the developers. The most intriguing part for me is the inclusion of code snippet in several programming languages (such as cURL, Python, PHP, and JavaScript) this enhances developer usability.","title":"Completeness:"},{"location":"review/#coherence","text":"The guides are organized in a logical progression, from introductory materials to advanced usage scenarios. \u2757 Note: As I was in the process of redocumenting the guide and API, the API documentation page became inaccessible on Friday afternoon, prompting a login request. I reached out to the People's Operations Officer, who provided me with the necessary credentials. However, upon attempting to log in, the process repeatedly cycled without granting access to the API documentation. To prevent such issues in the future, I recommend implementing a more robust routing system whenever updates are deployed. Additionally, thorough testing should be conducted to ensure all functionalities remain intact. The Project Manager (PM) should also establish testing as a mandatory step in the standard operating procedures before pushing updates to the live server.","title":"Coherence:"},{"location":"sorting/","text":"Sorting You can use the orderBy parameter to specify the order of records in the response. This allows you to sort the results in ascending or descending order. Ascending Order By default, results are sorted in ascending order. For example, to return a list of transactions in ascending order (oldest first), you can use the following syntax: {parameter}={value} . In this case, orderBy=date . curl --location --request GET 'https://api.test.woodcoreapp.com/api/v1/clients?orderBy=date' \\ --header 'Authorization: Bearer wc_test_5l0Fk28F2EUWiy01Vs9x7fEDWdYY8zqu90E986m8' Descending Order To return results in descending order, prepend a - (negative sign) to the parameter value. For example, to return the same list of transactions with the newest transactions first, use the following syntax: orderBy=date . curl --location --request GET 'https://api.test.woodcoreapp.com/api/v1/clients?orderBy=-date' \\ --header 'Authorization: Bearer wc_test_5l0Fk28F2EUWiy01Vs9x7fEDWdYY8zqu90E986m8'","title":"Sorting"},{"location":"sorting/#sorting","text":"You can use the orderBy parameter to specify the order of records in the response. This allows you to sort the results in ascending or descending order.","title":"Sorting"},{"location":"sorting/#ascending-order","text":"By default, results are sorted in ascending order. For example, to return a list of transactions in ascending order (oldest first), you can use the following syntax: {parameter}={value} . In this case, orderBy=date . curl --location --request GET 'https://api.test.woodcoreapp.com/api/v1/clients?orderBy=date' \\ --header 'Authorization: Bearer wc_test_5l0Fk28F2EUWiy01Vs9x7fEDWdYY8zqu90E986m8'","title":"Ascending Order"},{"location":"sorting/#descending-order","text":"To return results in descending order, prepend a - (negative sign) to the parameter value. For example, to return the same list of transactions with the newest transactions first, use the following syntax: orderBy=date . curl --location --request GET 'https://api.test.woodcoreapp.com/api/v1/clients?orderBy=-date' \\ --header 'Authorization: Bearer wc_test_5l0Fk28F2EUWiy01Vs9x7fEDWdYY8zqu90E986m8'","title":"Descending Order"},{"location":"versioning/","text":"API Versioning We regularly release new, dated versions of the API to introduce enhancements and fixes. While we aim to maintain backward compatibility changes, some updates may require breaking changes iterate on the API. Type of Backward-Compatible Changes The following types of updates will not break existing integrations: \u2705 New Features & Enhancements: Adding new API endpoints Introducing optional parameters to existing endpoints Expanding API responses with new data elements Adding new response codes Introducing new enumeration (enum) values Modifying the length or format of an API identifier \ud83d\udd17 Continuity & Upgrades You can continue using older API versions or update your application to support the latest WoodCore API version. We recommend staying up to date with newer versions for: \u2714\ufe0f Improved performance \u2714\ufe0f Enhanced security \u2714\ufe0f Access to new features","title":"Versioning"},{"location":"versioning/#api-versioning","text":"We regularly release new, dated versions of the API to introduce enhancements and fixes. While we aim to maintain backward compatibility changes, some updates may require breaking changes iterate on the API.","title":"API Versioning"},{"location":"versioning/#type-of-backward-compatible-changes","text":"The following types of updates will not break existing integrations: \u2705 New Features & Enhancements: Adding new API endpoints Introducing optional parameters to existing endpoints Expanding API responses with new data elements Adding new response codes Introducing new enumeration (enum) values Modifying the length or format of an API identifier","title":"Type of Backward-Compatible Changes"},{"location":"versioning/#continuity-upgrades","text":"You can continue using older API versions or update your application to support the latest WoodCore API version. We recommend staying up to date with newer versions for: \u2714\ufe0f Improved performance \u2714\ufe0f Enhanced security \u2714\ufe0f Access to new features","title":"\ud83d\udd17 Continuity &amp; Upgrades"}]}